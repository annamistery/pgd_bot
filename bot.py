# –§–∞–π–ª: telegram_bot.py

import logging
import os
import re
from datetime import datetime

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à–∏ —Ä–∞–±–æ—á–∏–µ –∫–ª–∞—Å—Å—ã
from pgd_bot import PGD_Person_Mod
from cashka_preprocessor import PersonalityProcessor

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("TOKEN_BOT")

if not BOT_TOKEN:
    print("--- –û–®–ò–ë–ö–ê ---")
    print("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è Telegram –±–æ—Ç–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ–∞–π–ª .env")
    print("–ò –≤ –Ω–µ–º –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞: TOKEN_BOT=12345:ABC-DEF...")
    exit()

GET_NAME, GET_DOB, GET_GENDER, SHOW_DESCRIPTION = range(4)


def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram MarkdownV2."""
    if not isinstance(text, str):
        text = str(text)
    escape_chars = r'_*[]()~`>#+-.=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

def format_results_for_download(name: str, dob: datetime, results: dict, tasks: dict, periods: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è .txt —Ñ–∞–π–ª–∞."""
    header = (
        f"–ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏\n{'='*20}\n"
        f"–ò–º—è: {name}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dob.strftime('%d.%m.%Y')}\n{'='*20}\n"
    )

    tasks_content = "\n--- –ó–∞–¥–∞—á–∏ –ø–æ –ú–∞—Ç—Ä–∏—Ü–µ ---\n"
    if tasks:
        for key, value in tasks.items():
            tasks_content += f"{key}: {value if value is not None else '-'}\n"
    
    periods_content = "\n--- –ë–∏–∑–Ω–µ—Å –ü–µ—Ä–∏–æ–¥—ã ---\n"
    if periods and "–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã" in periods:
        for key, value in periods["–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã"].items():
            periods_content += f"{key}: {value if value is not None else '-'}\n"

    main_content = "\n--- –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ---\n"
    for key, value in results.items():
        clean_value = value.replace('**', '').replace('*', '').replace('\n\n', '\n')
        main_content += f"\n--- {key} ---\n{clean_value}\n"
    
    return header + tasks_content + periods_content + main_content

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        r"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\! –Ø –±–æ—Ç –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\."
        r"\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è\.",
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    logger.info(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {context.user_data['name']}")
    await update.message.reply_text(
        rf"–û—Ç–ª–∏—á–Ω–æ, {escape_markdown(context.user_data['name'])}\! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–î–î\.–ú–ú\.–ì–ì–ì–ì*\.",
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return GET_DOB

async def get_dob(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data['dob'] = datetime.strptime(update.message.text, '%d.%m.%Y')
        logger.info(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {update.message.text}")
        keyboard = [[InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="–ñ"), InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="–ú")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(r"–°–ø–∞—Å–∏–±–æ\! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –ø–æ–ª:", reply_markup=reply_markup)
        return GET_GENDER
    except ValueError:
        await update.message.reply_text(
            r"‚ùå *–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã*\."
            r"\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–î–î\.–ú–ú\.–ì–ì–ì–ì* \(–Ω–∞–ø—Ä–∏–º–µ—Ä, 09\.10\.1988\)\.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return GET_DOB

async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    gender_char = query.data
    gender_full = "–ñ–µ–Ω—Å–∫–∏–π" if gender_char == "–ñ" else "–ú—É–∂—Å–∫–æ–π"
    logger.info(f"–ü–æ–ª: {gender_full}")

    await query.edit_message_text(text=rf"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª: *{escape_markdown(gender_full)}*\.\n\n‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—á–µ—Ç\.\.\.", parse_mode=ParseMode.MARKDOWN_V2)

    user_data = context.user_data
    name = user_data['name']
    date_str = user_data['dob'].strftime('%d.%m.%Y')

    try:
        person_mod = PGD_Person_Mod(name, date_str, gender_char)
        main_cup_data = person_mod.calculate_points()
        tasks_data = person_mod.tasks()
        periods_data = person_mod.periods_person()
        
        if not isinstance(main_cup_data, dict):
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã: {main_cup_data}")

        processor = PersonalityProcessor(main_cup_data)
        full_descriptions = processor.get_full_description()
        
        context.user_data['full_descriptions'] = full_descriptions
        context.user_data['tasks_data'] = tasks_data
        context.user_data['periods_data'] = periods_data
        
        description_keys = list(full_descriptions.keys())
        context.user_data['description_keys'] = description_keys

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –≠—Ç–æ—Ç –±–ª–æ–∫ —Ç–µ–ø–µ—Ä—å –ù–ê–•–û–î–ò–¢–°–Ø –í–ù–£–¢–†–ò TRY ---
        header = f"*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {escape_markdown(name)} \\({escape_markdown(date_str)}\\)*\n\n"
        summary_text = ""
        if tasks_data:
            summary_text += "*–ó–∞–¥–∞—á–∏ –ø–æ –ú–∞—Ç—Ä–∏—Ü–µ:*\n"
            for key, val in tasks_data.items():
                summary_text += f"_{escape_markdown(key)}_ `{escape_markdown(val) if val is not None else '-'}`\n"
        if periods_data and "–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã" in periods_data:
            summary_text += "\n*–ë–∏–∑–Ω–µ—Å –ü–µ—Ä–∏–æ–¥—ã:*\n"
            for key, val in periods_data["–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã"].items():
                summary_text += f"_{escape_markdown(key)}_: `{escape_markdown(val) if val is not None else '-'}`\n"
        
        if summary_text:
            await context.bot.send_message(chat_id=query.message.chat_id, text=header + summary_text, parse_mode=ParseMode.MARKDOWN_V2)
        # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê ---

        if full_descriptions:
            keyboard = [
                [InlineKeyboardButton(text=key, callback_data=f"desc_{i}")]
                for i, key in enumerate(description_keys)
            ]
            keyboard.append([InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ .txt", callback_data="DOWNLOAD_FILE")])
            keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="END_CONVERSATION")])
    
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç:",
                reply_markup=reply_markup
            )
            return SHOW_DESCRIPTION
        else:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ –±—ã–ª–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã.")
            return await end_conversation(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}", exc_info=True)
        await context.bot.send_message(chat_id=query.message.chat_id, text=r"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\.")
        return ConversationHandler.END

# –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ telegram_bot.py, –∑–∞–º–µ–Ω–∏–≤ —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é show_description

async def show_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    MAX_MESSAGE_LENGTH = 4096

    try:
        key_index = int(query.data.split('_')[1])
    except (IndexError, ValueError):
        await query.edit_message_text(text="‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
        return SHOW_DESCRIPTION

    description_keys = context.user_data.get('description_keys', [])
    full_descriptions = context.user_data.get('full_descriptions', {})

    if not description_keys or key_index >= len(description_keys):
        await query.edit_message_text(text="‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞.")
        return SHOW_DESCRIPTION

    selected_key = description_keys[key_index]
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –±–æ–ª—å—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    description_text = full_descriptions.get(selected_key, "–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —Ç–æ—á–∫–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ.")
    
    formatted_value = description_text.replace('**', '*').replace('\n\n', '\n')
    message_text = f"*{escape_markdown(selected_key)}*\n\n{escape_markdown(formatted_value)}"
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="BACK_TO_LIST")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ª–∏–º–∏—Ç Telegram
        if len(message_text) > MAX_MESSAGE_LENGTH:
            # –ï—Å–ª–∏ –¥–∞, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ, –æ—Å—Ç–∞–≤–ª—è—è –º–µ—Å—Ç–æ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            cutoff_point = MAX_MESSAGE_LENGTH - 200  # –ó–∞–ø–∞—Å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ Markdown-—Ä–∞–∑–º–µ—Ç–∫–∏
            message_text = message_text[:cutoff_point] + (
                r"\n\n\.\.\."
                r"\n\n*\[–í–Ω–∏–º–∞–Ω–∏–µ: –¢–µ–∫—Å—Ç –±—ã–ª —Å–æ–∫—Ä–∞—â–µ–Ω –∏–∑\-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram\. "
                r"–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ñ–∞–π–ª–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\]*"
            )

        await query.edit_message_text(
            text=message_text, 
            reply_markup=reply_markup, 
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞ '{selected_key}': {e}", exc_info=True)
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø—Ä–æ–±–ª–µ–º–µ
        await query.edit_message_text(
            text=r"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –ø—É–Ω–∫—Ç–∞\. "
                r"–í–æ–∑–º–æ–∂–Ω–æ, –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞—á–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞\.",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN_V2
        )
    
    return SHOW_DESCRIPTION

async def back_to_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    full_descriptions = context.user_data.get('full_descriptions', {})
    
    if full_descriptions:
        description_keys = context.user_data.get('description_keys', [])
        keyboard = [
            [InlineKeyboardButton(text=key, callback_data=f"desc_{i}")]
            for i, key in enumerate(description_keys)
        ]
        keyboard.append([InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ .txt", callback_data="DOWNLOAD_FILE")])
        keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="END_CONVERSATION")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç:",
            reply_markup=reply_markup
        )
    else:
        await query.edit_message_text("–°–ø–∏—Å–æ–∫ –æ–ø–∏—Å–∞–Ω–∏–π –ø—É—Å—Ç.")

    return SHOW_DESCRIPTION

async def send_results_as_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer(text="–ì–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª...")

    user_data = context.user_data
    
    if not all(k in user_data for k in ['name', 'dob', 'full_descriptions', 'tasks_data', 'periods_data']):
        await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ /start")
        return SHOW_DESCRIPTION

    file_content = format_results_for_download(
        name=user_data['name'],
        dob=user_data['dob'],
        results=user_data['full_descriptions'],
        tasks=user_data['tasks_data'],
        periods=user_data['periods_data']
    )
    
    file_name = f"analysis_{user_data['name']}_{user_data['dob'].strftime('%Y%m%d')}.txt"
    
    try:
        await context.bot.send_document(
            chat_id=query.message.chat_id,
            document=bytes(file_content, 'utf-8'),
            filename=file_name
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
        await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª.")
    
    return SHOW_DESCRIPTION

async def end_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text(text=r"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω\. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\.", parse_mode=ParseMode.MARKDOWN_V2)
    else:
        await update.message.reply_text(r"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω\. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\.", parse_mode=ParseMode.MARKDOWN_V2)

    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.first_name} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥.")
    await update.message.reply_text(
        r"–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑, –≤–≤–µ–¥–∏—Ç–µ /start\.", 
        parse_mode=ParseMode.MARKDOWN_V2
    )
    context.user_data.clear()
    return ConversationHandler.END

def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_DOB: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_dob)],
            GET_GENDER: [CallbackQueryHandler(get_gender, pattern="^–ñ$|^–ú$")],
            SHOW_DESCRIPTION: [
                CallbackQueryHandler(back_to_list, pattern="^BACK_TO_LIST$"),
                CallbackQueryHandler(end_conversation, pattern="^END_CONVERSATION$"),
                CallbackQueryHandler(send_results_as_file, pattern="^DOWNLOAD_FILE$"),
                CallbackQueryHandler(show_description, pattern=r"^desc_\d+$")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__": 
    main()