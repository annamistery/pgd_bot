# –§–∞–π–ª: telegram_bot.py

import logging
import os
import re
from datetime import datetime

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à–∏ —Ä–∞–±–æ—á–∏–µ –∫–ª–∞—Å—Å—ã
from pgd_bot import PGD_Person_Mod
from cashka_preprocessor import PersonalityProcessor

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("TOKEN_BOT")

if not BOT_TOKEN:
    print("--- –û–®–ò–ë–ö–ê ---")
    print("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è Telegram –±–æ—Ç–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ–∞–π–ª .env")
    print("–ò –≤ –Ω–µ–º –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞: TOKEN_BOT=12345:ABC-DEF...")
    exit()

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ ---
# GET_... - –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, SHOW_... - –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
GET_NAME, GET_DOB, GET_GENDER, SHOW_DESCRIPTION = range(4)


def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram MarkdownV2."""
    if not isinstance(text, str):
        text = str(text)
    escape_chars = r'_*[]()~`>#+-.=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è."""
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Å—Å–∏–π –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    context.user_data.clear()
    await update.message.reply_text(
        r"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\! –Ø –±–æ—Ç –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\."
        r"\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è\.",
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return GET_NAME


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è."""
    context.user_data['name'] = update.message.text
    logger.info(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {context.user_data['name']}")
    await update.message.reply_text(
        rf"–û—Ç–ª–∏—á–Ω–æ, {escape_markdown(context.user_data['name'])}\! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–î–î\.–ú–ú\.–ì–ì–ì–ì*\.",
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return GET_DOB


async def get_dob(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª."""
    try:
        context.user_data['dob'] = datetime.strptime(update.message.text, '%d.%m.%Y')
        logger.info(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {update.message.text}")
        keyboard = [[InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="–ñ"), InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="–ú")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(r"–°–ø–∞—Å–∏–±–æ\! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –ø–æ–ª:", reply_markup=reply_markup)
        return GET_GENDER
    except ValueError:
        await update.message.reply_text(
            r"‚ùå *–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã*\."
            r"\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–î–î\.–ú–ú\.–ì–ì–ì–ì* \(–Ω–∞–ø—Ä–∏–º–µ—Ä, 09\.10\.1988\)\.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return GET_DOB


async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª, –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—á–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."""
    query = update.callback_query
    await query.answer()

    gender_char = query.data
    gender_full = "–ñ–µ–Ω—Å–∫–∏–π" if gender_char == "–ñ" else "–ú—É–∂—Å–∫–æ–π"
    logger.info(f"–ü–æ–ª: {gender_full}")

    await query.edit_message_text(text=rf"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª: *{escape_markdown(gender_full)}*\.\n\n‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—á–µ—Ç\.\.\.", parse_mode=ParseMode.MARKDOWN_V2)

    user_data = context.user_data
    name = user_data['name']
    date_str = user_data['dob'].strftime('%d.%m.%Y')

    try:
        # 1. –†–∞—Å—á–µ—Ç—ã
        person_mod = PGD_Person_Mod(name, date_str, gender_char)
        main_cup_data = person_mod.calculate_points()
        tasks_data = person_mod.tasks()
        periods_data = person_mod.periods_person()
        
        if not isinstance(main_cup_data, dict):
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã: {main_cup_data}")

        # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        processor = PersonalityProcessor(main_cup_data)
        full_descriptions = processor.get_full_description()
        
        # --- –°–û–•–†–ê–ù–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í –ü–ê–ú–Ø–¢–ò –î–ò–ê–õ–û–ì–ê ---
        context.user_data['full_descriptions'] = full_descriptions

        # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        header = f"*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {escape_markdown(name)} \\({escape_markdown(date_str)}\\)*\n\n"
        summary_text = ""
        if tasks_data:
            summary_text += "*–ó–∞–¥–∞—á–∏ –ø–æ –ú–∞—Ç—Ä–∏—Ü–µ:*\n"
            for key, val in tasks_data.items():
                summary_text += f"_{escape_markdown(key)}_ `{escape_markdown(val) if val is not None else '-'}`\n"
        if periods_data and "–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã" in periods_data:
            summary_text += "\n*–ë–∏–∑–Ω–µ—Å –ü–µ—Ä–∏–æ–¥—ã:*\n"
            for key, val in periods_data["–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã"].items():
                summary_text += f"_{escape_markdown(key)}_: `{escape_markdown(val) if val is not None else '-'}`\n"
        
        await context.bot.send_message(chat_id=query.message.chat_id, text=header + summary_text, parse_mode=ParseMode.MARKDOWN_V2)
        
        # 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
        if full_descriptions:
            keyboard = [[InlineKeyboardButton(text=key, callback_data=key)] for key in full_descriptions.keys()]
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="END_CONVERSATION")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è:",
                reply_markup=reply_markup
            )
            # –ü–ï–†–ï–•–û–î–ò–ú –í –°–û–°–¢–û–Ø–ù–ò–ï –û–ñ–ò–î–ê–ù–ò–Ø –ù–ê–ñ–ê–¢–ò–Ø –ö–ù–û–ü–ö–ò
            return SHOW_DESCRIPTION
        else:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ –±—ã–ª–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã.")
            return await end_conversation(update, context) # –ó–∞–≤–µ—Ä—à–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–π

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}", exc_info=True)
        await context.bot.send_message(chat_id=query.message.chat_id, text=r"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\.")
        return ConversationHandler.END


async def show_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏."""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ callback_data
    selected_key = query.data
    
    # –î–æ—Å—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
    full_descriptions = context.user_data.get('full_descriptions', {})

    if not full_descriptions or selected_key not in full_descriptions:
        await query.edit_message_text(text="‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞.")
        return SHOW_DESCRIPTION

    description_text = full_descriptions[selected_key]
    formatted_value = description_text.replace('**', '*').replace('\n\n', '\n')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–Ω–∞–∑–∞–¥"
    message_text = f"*{escape_markdown(selected_key)}*\n\n{escape_markdown(formatted_value)}"
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="BACK_TO_LIST")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ç–µ–∫—Å—Ç
    await query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
    
    return SHOW_DESCRIPTION


async def back_to_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()
    
    full_descriptions = context.user_data.get('full_descriptions', {})
    
    if full_descriptions:
        keyboard = [[InlineKeyboardButton(text=key, callback_data=key)] for key in full_descriptions.keys()]
        keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="END_CONVERSATION")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞—è —Å–ø–∏—Å–æ–∫
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )
    else:
        await query.edit_message_text("–°–ø–∏—Å–æ–∫ –æ–ø–∏—Å–∞–Ω–∏–π –ø—É—Å—Ç.")

    return SHOW_DESCRIPTION


async def end_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text(text="‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω\. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\.", parse_mode=ParseMode.MARKDOWN_V2)
    else:
        await update.message.reply_text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω\. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\.", parse_mode=ParseMode.MARKDOWN_V2)

    context.user_data.clear()
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text(r"–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start\.")
    context.user_data.clear()
    return ConversationHandler.END


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_DOB: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_dob)],
            GET_GENDER: [CallbackQueryHandler(get_gender, pattern="^–ñ$|^–ú$")], # –õ–æ–≤–∏—Ç —Ç–æ–ª—å–∫–æ '–ú' –∏–ª–∏ '–ñ'
            SHOW_DESCRIPTION: [
                CallbackQueryHandler(back_to_list, pattern="^BACK_TO_LIST$"),
                CallbackQueryHandler(end_conversation, pattern="^END_CONVERSATION$"),
                # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≤–∏—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è
                CallbackQueryHandler(show_description) 
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__": 
    main()