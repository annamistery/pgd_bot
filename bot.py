# –§–∞–π–ª: telegram_bot.py (–ü–û–õ–ù–ê–Ø –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)

import logging
import os
import re
from datetime import datetime

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

from pgd_bot import PGD_Person_Mod
from cashka_preprocessor import PersonalityProcessor

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("TOKEN_BOT")

if not BOT_TOKEN:
    print("–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è Telegram –±–æ—Ç–∞ –≤ .env —Ñ–∞–π–ª–µ.")
    exit()

GET_NAME, GET_DOB, GET_GENDER, SHOW_DESCRIPTION = range(4)


def escape_markdown(text: str) -> str:
    if not isinstance(text, str):
        text = str(text)
    escape_chars = r'_*[]()~`>#+-.=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

def format_results_for_download(name: str, dob: datetime, results: dict, tasks: dict, periods: dict) -> str:
    header = (
        f"–ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏\n{'='*20}\n"
        f"–ò–º—è: {name}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dob.strftime('%d.%m.%Y')}\n{'='*20}\n"
    )
    tasks_content = "\n--- –ó–∞–¥–∞—á–∏ –ø–æ –ú–∞—Ç—Ä–∏—Ü–µ ---\n"
    if tasks:
        for key, value in tasks.items():
            tasks_content += f"{key}: {value if value is not None else '-'}\n"
    periods_content = "\n--- –ë–∏–∑–Ω–µ—Å –ü–µ—Ä–∏–æ–¥—ã ---\n"
    if periods and "–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã" in periods:
        for key, value in periods["–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã"].items():
            periods_content += f"{key}: {value if value is not None else '-'}\n"
    main_content = "\n--- –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ---\n"
    for key, value in results.items():
        clean_value = value.replace('**', '').replace('*', '').replace('\n\n', '\n')
        main_content += f"\n--- {key} ---\n{clean_value}\n"
    return header + tasks_content + periods_content + main_content


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        r"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\! –Ø –±–æ—Ç –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\."
        r"\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è\.",
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return GET_NAME


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text(
        rf"–û—Ç–ª–∏—á–Ω–æ, {escape_markdown(context.user_data['name'])}\! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–î–î\.–ú–ú\.–ì–ì–ì–ì*\.",
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return GET_DOB


async def get_dob(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data['dob'] = datetime.strptime(update.message.text, '%d.%m.%Y')
        keyboard = [[InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="–ñ"), InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="–ú")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(r"–°–ø–∞—Å–∏–±–æ\! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –ø–æ–ª:", reply_markup=reply_markup)
        return GET_GENDER
    except ValueError:
        await update.message.reply_text(
            r"‚ùå *–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã*\."
            r"\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–î–î\.–ú–ú\.–ì–ì–ì–ì*\.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return GET_DOB


# –§–∞–π–ª: telegram_bot.py
# –ó–∞–º–µ–Ω–∏—Ç–µ —Ç–æ–ª—å–∫–æ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é

# –§–∞–π–ª: telegram_bot.py
# –ó–∞–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é get_gender –Ω–∞ —ç—Ç—É:

async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    gender_char = query.data
    gender_full = "–ñ–µ–Ω—Å–∫–∏–π" if gender_char == "–ñ" else "–ú—É–∂—Å–∫–æ–π"
    await query.edit_message_text(text=rf"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª: *{escape_markdown(gender_full)}*\.\n\n‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—á–µ—Ç\.\.\.", parse_mode=ParseMode.MARKDOWN_V2)

    user_data = context.user_data
    name = user_data['name']
    date_str = user_data['dob'].strftime('%d.%m.%Y')

    try:
        # –®–∞–≥ 1: –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç—ã
        person_mod = PGD_Person_Mod(name, date_str, gender_char)
        main_cup_data = person_mod.calculate_points()
        tasks_data = person_mod.tasks()
        periods_data = person_mod.periods_person()

        # –®–∞–≥ 2: –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        wrapped_cup_data = {'–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—à–∫–∞': main_cup_data}
        processor = PersonalityProcessor(wrapped_cup_data)
        full_descriptions = processor.get_full_description()
        
        # –®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é
        context.user_data['full_descriptions'] = full_descriptions
        context.user_data['tasks_data'] = tasks_data
        context.user_data['periods_data'] = periods_data
        
        # --- –í–û–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö ---
        header = f"*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {escape_markdown(name)} \\({escape_markdown(date_str)}\\)*\n\n"
        
        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é summary_text
        summary_text = ""
        
        # 2. –ù–∞–ø–æ–ª–Ω—è–µ–º –µ–µ –¥–∞–Ω–Ω—ã–º–∏
        if tasks_data:
            summary_text += "*–ó–∞–¥–∞—á–∏ –ø–æ –ú–∞—Ç—Ä–∏—Ü–µ:*\n"
            for key, val in tasks_data.items():
                summary_text += f"_{escape_markdown(key)}_ `{escape_markdown(val) if val is not None else '-'}`\n"
        if periods_data and "–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã" in periods_data:
            summary_text += "\n*–ë–∏–∑–Ω–µ—Å –ü–µ—Ä–∏–æ–¥—ã:*\n"
            for key, val in periods_data["–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã"].items():
                summary_text += f"_{escape_markdown(key)}_: `{escape_markdown(val) if val is not None else '-'}`\n"
        # --- –ö–û–ù–ï–¶ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê ---
        
        # 3. –¢–µ–ø–µ—Ä—å —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
        if summary_text:
            await context.bot.send_message(chat_id=query.message.chat_id, text=header + summary_text, parse_mode=ParseMode.MARKDOWN_V2)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        if full_descriptions:
            description_keys = list(full_descriptions.keys())
            keyboard = [
                [InlineKeyboardButton(text=key, callback_data=f"key_{key}")]
                for key in description_keys
            ]
            keyboard.append([InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ .txt", callback_data="DOWNLOAD_FILE")])
            keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="END_CONVERSATION")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç:",
                reply_markup=reply_markup
            )
            return SHOW_DESCRIPTION
        else:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ –±—ã–ª–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã.")
            return await end_conversation(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}", exc_info=True)
        await context.bot.send_message(chat_id=query.message.chat_id, text=r"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\.")
        return ConversationHandler.END

async def show_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    MAX_MESSAGE_LENGTH = 4096

    try:
        # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –∏–∑ callback_data
        selected_key = query.data.split('_', 1)[1]
    except IndexError:
        await query.edit_message_text(text="‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
        return SHOW_DESCRIPTION

    full_descriptions = context.user_data.get('full_descriptions', {})
    description_text = full_descriptions.get(selected_key, "–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —Ç–æ—á–∫–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ.")
    
    formatted_value = description_text.replace('**', '*').replace('\n\n', '\n')
    message_text = f"*{escape_markdown(selected_key)}*\n\n{escape_markdown(formatted_value)}"
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="BACK_TO_LIST")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        if len(message_text) > MAX_MESSAGE_LENGTH:
            cutoff_point = MAX_MESSAGE_LENGTH - 200
            message_text = message_text[:cutoff_point] + (r"\n\n\.\.\." r"\n\n*\[–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤ —Ñ–∞–π–ª–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\]*")
        await query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞ '{selected_key}': {e}", exc_info=True)
        await query.edit_message_text(text=r"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è\. –°–∫–∞—á–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞\.", reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
    
    return SHOW_DESCRIPTION


async def back_to_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    full_descriptions = context.user_data.get('full_descriptions', {})
    
    if full_descriptions:
        # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ get_gender
        keyboard = [
            [InlineKeyboardButton(text=key, callback_data=f"key_{key}")]
            for key in full_descriptions.keys()
        ]
        keyboard.append([InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ .txt", callback_data="DOWNLOAD_FILE")])
        keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="END_CONVERSATION")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è:", reply_markup=reply_markup)
    else:
        await query.edit_message_text("–°–ø–∏—Å–æ–∫ –æ–ø–∏—Å–∞–Ω–∏–π –ø—É—Å—Ç.")
    return SHOW_DESCRIPTION


# –§—É–Ω–∫—Ü–∏–∏ send_results_as_file, end_conversation, cancel –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
async def send_results_as_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ...
    return SHOW_DESCRIPTION
async def end_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ...
    return ConversationHandler.END
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ...
    return ConversationHandler.END


def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_DOB: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_dob)],
            GET_GENDER: [CallbackQueryHandler(get_gender, pattern="^–ñ$|^–ú$")],
            SHOW_DESCRIPTION: [
                CallbackQueryHandler(back_to_list, pattern="^BACK_TO_LIST$"),
                CallbackQueryHandler(end_conversation, pattern="^END_CONVERSATION$"),
                CallbackQueryHandler(send_results_as_file, pattern="^DOWNLOAD_FILE$"),
                # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
                CallbackQueryHandler(show_description, pattern=r"^key_")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__": 
    main()