# –§–∞–π–ª: telegram_bot.py

import logging
import os
import re
from datetime import datetime

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à–∏ —Ä–∞–±–æ—á–∏–µ –∫–ª–∞—Å—Å—ã
from pgd_bot import PGD_Person_Mod
from cashka_preprocessor import PersonalityProcessor

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("TOKEN_BOT")

if not BOT_TOKEN:
    print("--- –û–®–ò–ë–ö–ê ---")
    print("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è Telegram –±–æ—Ç–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ–∞–π–ª .env")
    print("–ò –≤ –Ω–µ–º –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞: TOKEN_BOT=12345:ABC-DEF...")
    exit()

GET_NAME, GET_DOB, GET_GENDER, SHOW_DESCRIPTION = range(4)


def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram MarkdownV2."""
    if not isinstance(text, str):
        text = str(text)
    escape_chars = r'_*[]()~`>#+-.=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ ---
def format_results_for_download(name: str, dob: datetime, results: dict, tasks: dict, periods: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è .txt —Ñ–∞–π–ª–∞."""
    header = (
        f"–ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏\n{'='*20}\n"
        f"–ò–º—è: {name}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dob.strftime('%d.%m.%Y')}\n{'='*20}\n"
    )

    tasks_content = "\n--- –ó–∞–¥–∞—á–∏ –ø–æ –ú–∞—Ç—Ä–∏—Ü–µ ---\n"
    if tasks:
        for key, value in tasks.items():
            tasks_content += f"{key}: {value if value is not None else '-'}\n"
    
    periods_content = "\n--- –ë–∏–∑–Ω–µ—Å –ü–µ—Ä–∏–æ–¥—ã ---\n"
    if periods and "–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã" in periods:
        for key, value in periods["–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã"].items():
            periods_content += f"{key}: {value if value is not None else '-'}\n"

    main_content = "\n--- –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ---\n"
    for key, value in results.items():
        # –£–±–∏—Ä–∞–µ–º Markdown –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        clean_value = value.replace('**', '').replace('*', '').replace('\n\n', '\n')
        main_content += f"\n--- {key} ---\n{clean_value}\n"
    
    return header + tasks_content + periods_content + main_content

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        r"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\! –Ø –±–æ—Ç –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\."
        r"\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è\.",
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    logger.info(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {context.user_data['name']}")
    await update.message.reply_text(
        rf"–û—Ç–ª–∏—á–Ω–æ, {escape_markdown(context.user_data['name'])}\! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–î–î\.–ú–ú\.–ì–ì–ì–ì*\.",
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return GET_DOB

async def get_dob(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data['dob'] = datetime.strptime(update.message.text, '%d.%m.%Y')
        logger.info(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {update.message.text}")
        keyboard = [[InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="–ñ"), InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="–ú")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(r"–°–ø–∞—Å–∏–±–æ\! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –ø–æ–ª:", reply_markup=reply_markup)
        return GET_GENDER
    except ValueError:
        await update.message.reply_text(
            r"‚ùå *–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã*\."
            r"\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–î–î\.–ú–ú\.–ì–ì–ì–ì* \(–Ω–∞–ø—Ä–∏–º–µ—Ä, 09\.10\.1988\)\.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return GET_DOB

async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    gender_char = query.data
    gender_full = "–ñ–µ–Ω—Å–∫–∏–π" if gender_char == "–ñ" else "–ú—É–∂—Å–∫–æ–π"
    logger.info(f"–ü–æ–ª: {gender_full}")

    await query.edit_message_text(text=rf"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª: *{escape_markdown(gender_full)}*\.\n\n‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—á–µ—Ç\.\.\.", parse_mode=ParseMode.MARKDOWN_V2)

    user_data = context.user_data
    name = user_data['name']
    date_str = user_data['dob'].strftime('%d.%m.%Y')

    try:
        # –†–∞—Å—á–µ—Ç—ã
        person_mod = PGD_Person_Mod(name, date_str, gender_char)
        main_cup_data = person_mod.calculate_points()
        tasks_data = person_mod.tasks()
        periods_data = person_mod.periods_person()
        
        if not isinstance(main_cup_data, dict):
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã: {main_cup_data}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        processor = PersonalityProcessor(main_cup_data)
        full_descriptions = processor.get_full_description()
        
        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–∞ ---
        context.user_data['full_descriptions'] = full_descriptions
        context.user_data['tasks_data'] = tasks_data
        context.user_data['periods_data'] = periods_data

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        header = f"*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {escape_markdown(name)} \\({escape_markdown(date_str)}\\)*\n\n"
        summary_text = ""
        if tasks_data:
            summary_text += "*–ó–∞–¥–∞—á–∏ –ø–æ –ú–∞—Ç—Ä–∏—Ü–µ:*\n"
            for key, val in tasks_data.items():
                summary_text += f"_{escape_markdown(key)}_ `{escape_markdown(val) if val is not None else '-'}`\n"
        if periods_data and "–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã" in periods_data:
            summary_text += "\n*–ë–∏–∑–Ω–µ—Å –ü–µ—Ä–∏–æ–¥—ã:*\n"
            for key, val in periods_data["–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã"].items():
                summary_text += f"_{escape_markdown(key)}_: `{escape_markdown(val) if val is not None else '-'}`\n"
        
        await context.bot.send_message(chat_id=query.message.chat_id, text=header + summary_text, parse_mode=ParseMode.MARKDOWN_V2)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
        if full_descriptions:
            keyboard = [[InlineKeyboardButton(text=key, callback_data=key)] for key in full_descriptions.keys()]
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ---
            keyboard.append([InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ .txt", callback_data="DOWNLOAD_FILE")])
            keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="END_CONVERSATION")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç:",
                reply_markup=reply_markup
            )
            return SHOW_DESCRIPTION
        else:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ –±—ã–ª–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã.")
            return await end_conversation(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}", exc_info=True)
        await context.bot.send_message(chat_id=query.message.chat_id, text=r"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\.")
        return ConversationHandler.END

async def show_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    selected_key = query.data
    full_descriptions = context.user_data.get('full_descriptions', {})

    if not full_descriptions or selected_key not in full_descriptions:
        await query.edit_message_text(text="‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞.")
        return SHOW_DESCRIPTION

    description_text = full_descriptions[selected_key]
    formatted_value = description_text.replace('**', '*').replace('\n\n', '\n')
    
    message_text = f"*{escape_markdown(selected_key)}*\n\n{escape_markdown(formatted_value)}"
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="BACK_TO_LIST")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
    
    return SHOW_DESCRIPTION

async def back_to_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    full_descriptions = context.user_data.get('full_descriptions', {})
    
    if full_descriptions:
        keyboard = [[InlineKeyboardButton(text=key, callback_data=key)] for key in full_descriptions.keys()]
        keyboard.append([InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ .txt", callback_data="DOWNLOAD_FILE")])
        keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="END_CONVERSATION")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç:",
            reply_markup=reply_markup
        )
    else:
        await query.edit_message_text("–°–ø–∏—Å–æ–∫ –æ–ø–∏—Å–∞–Ω–∏–π –ø—É—Å—Ç.")

    return SHOW_DESCRIPTION

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ---
async def send_results_as_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç .txt —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    query = update.callback_query
    await query.answer(text="–ì–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª...") # –ö–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user_data = context.user_data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not all(k in user_data for k in ['name', 'dob', 'full_descriptions', 'tasks_data', 'periods_data']):
        await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ /start")
        return SHOW_DESCRIPTION

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    file_content = format_results_for_download(
        name=user_data['name'],
        dob=user_data['dob'],
        results=user_data['full_descriptions'],
        tasks=user_data['tasks_data'],
        periods=user_data['periods_data']
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    file_name = f"analysis_{user_data['name']}_{user_data['dob'].strftime('%Y%m%d')}.txt"
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        # –ú—ã –ø–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤, –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–∞–º–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ñ–∞–π–ª
        await context.bot.send_document(
            chat_id=query.message.chat_id,
            document=bytes(file_content, 'utf-8'),
            filename=file_name
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
        await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª.")
    
    # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä
    return SHOW_DESCRIPTION


async def end_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    query = update.callback_query
    if query:
        await query.answer()
        # –î–æ–±–∞–≤–ª—è–µ–º 'r'
        await query.edit_message_text(text=r"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω\. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\.", parse_mode=ParseMode.MARKDOWN_V2)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º 'r'
        await update.message.reply_text(r"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω\. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\.", parse_mode=ParseMode.MARKDOWN_V2)

    context.user_data.clear()
    return ConversationHandler.END

def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_DOB: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_dob)],
            GET_GENDER: [CallbackQueryHandler(get_gender, pattern="^–ñ$|^–ú$")],
            SHOW_DESCRIPTION: [
                CallbackQueryHandler(back_to_list, pattern="^BACK_TO_LIST$"),
                CallbackQueryHandler(end_conversation, pattern="^END_CONVERSATION$"),
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ---
                CallbackQueryHandler(send_results_as_file, pattern="^DOWNLOAD_FILE$"),
                # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≤–∏—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ —Å —Ç–æ—á–∫–∞–º–∏
                CallbackQueryHandler(show_description) 
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__": 
    main()