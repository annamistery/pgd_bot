import os
import sys
import asyncio
from fpdf import FPDF
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
from pgd_bot import PGD_Person_Mod, PGD_Pair

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ ===
with open("token.txt", "r") as f:
    TOKEN = f.read().strip()

# === –°–æ—Å—Ç–æ—è–Ω–∏—è
MENU, NAME, DATE, SEX = range(4)
P_NAME1, P_DATE1, P_NAME2, P_DATE2 = range(10, 14)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard():
    return ReplyKeyboardMarkup([["üë§ –õ–∏—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"], ["‚ù§Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞—Ä—ã"]], resize_keyboard=True)

def cancel_keyboard():
    return ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)

def result_keyboard():
    return ReplyKeyboardMarkup([["üìÑ –°–∫–∞—á–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"], ["üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)

# === PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
def generate_pdf(text: str, filename: str) -> str:
    os.makedirs("output", exist_ok=True)
    path = os.path.join("output", filename)
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    for line in text.split("\n"):
        pdf.multi_cell(0, 10, line)
    pdf.output(path)
    return path

# === –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:", reply_markup=main_menu_keyboard())
    return MENU

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üë§ –õ–∏—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è:", reply_markup=cancel_keyboard())
        return NAME
    elif text == "‚ù§Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞—Ä—ã":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞:", reply_markup=cancel_keyboard())
        return P_NAME1
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return MENU

# === –õ–∏—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
async def personal_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=cancel_keyboard())
    return DATE

async def personal_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["date"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª:", reply_markup=ReplyKeyboardMarkup([["–ú", "–ñ"]], resize_keyboard=True))
    return SEX

async def personal_sex(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sex = update.message.text.strip().upper()
    if sex not in ["–ú", "–ñ"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –ú –∏–ª–∏ –ñ.")
        return SEX
    context.user_data["sex"] = sex

    try:
        person = PGD_Person_Mod(context.user_data["name"], context.user_data["date"], context.user_data["sex"])
        points = person.calculate_points()
        tasks = person.tasks()
        periods = person.periods_person()

        msg = f"üìå *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {context.user_data['name']}*\n\n"
        msg += "üîπ *–¢–æ—á–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏:*\n"
        for group, values in points.items():
            msg += f"_{group}_\n"
            for key, val in values.items():
                msg += f"‚Ä¢ *{key}*: `{val}`\n"
        msg += "\nüåü *–°–≤–µ—Ä—Ö–∑–∞–¥–∞—á–∏:*\n"
        for k, v in tasks.items():
            msg += f"‚Ä¢ *{k}*: `{v}`\n"
        msg += "\nüß≠ *–ë–∏–∑–Ω–µ—Å-–ø–µ—Ä–∏–æ–¥—ã:*\n"
        for k, v in periods["–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã"].items():
            msg += f"‚Ä¢ *{k}*: `{v}`\n"

        context.user_data["last_result"] = msg
        await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=result_keyboard())
        return MENU
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
        return MENU

# === –ü–∞—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
async def pair_name1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name1"] = update.message.text
    await update.message.reply_text("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    return P_DATE1

async def pair_date1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["date1"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞:")
    return P_NAME2

async def pair_name2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name2"] = update.message.text
    await update.message.reply_text("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    return P_DATE2

async def pair_date2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["date2"] = update.message.text
    try:
        pair = PGD_Pair(context.user_data["name1"], context.user_data["date1"],
                        context.user_data["name2"], context.user_data["date2"])
        points = pair.main_pair()
        tasks = pair.tasks()
        periods = pair.periods_pair()
        partner_tasks = pair.tasks_business()

        msg = f"üìå *–ü–∞—Ä–∞: {context.user_data['name1']} –∏ {context.user_data['name2']}*\n\n"
        msg += "üîπ *–¢–æ—á–∫–∏ –ø–∞—Ä—ã:*\n"
        for group, values in points.items():
            msg += f"_{group}_\n"
            for key, val in values.items():
                msg += f"‚Ä¢ *{key}*: `{val}`\n"
        msg += "\nüåü *–°–≤–µ—Ä—Ö–∑–∞–¥–∞—á–∏:*\n"
        for key, val in tasks["–°–≤–µ—Ä—Ö–∑–∞–¥–∞—á–∏"].items():
            msg += f"‚Ä¢ *{key}*: `{val}`\n"
        msg += "\nüß≠ *–ë–∏–∑–Ω–µ—Å-–ø–µ—Ä–∏–æ–¥—ã:*\n"
        for key, val in periods["–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã"].items():
            msg += f"‚Ä¢ *{key}*: `{val}`\n"
        msg += "\nüîß *–ó–∞–¥–∞—á–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤:*\n"
        for k, v in partner_tasks.items():
            msg += f"‚Ä¢ *{k}*: `{v}`\n"

        context.user_data["last_result"] = msg
        await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=result_keyboard())
        return MENU
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
        return MENU

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_result_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìÑ –°–∫–∞—á–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ":
        try:
            content = context.user_data.get("last_result", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            filename = f"diagnostic_{update.message.from_user.id}.pdf"
            path = generate_pdf(content, filename)
            await update.message.reply_document(document=open(path, "rb"), filename=filename)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
        return MENU
    elif text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await start(update, context)

# === –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard())
    return MENU

# === –û—Å–Ω–æ–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, personal_name)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, personal_date)],
            SEX: [MessageHandler(filters.TEXT & ~filters.COMMAND, personal_sex)],
            P_NAME1: [MessageHandler(filters.TEXT & ~filters.COMMAND, pair_name1)],
            P_DATE1: [MessageHandler(filters.TEXT & ~filters.COMMAND, pair_date1)],
            P_NAME2: [MessageHandler(filters.TEXT & ~filters.COMMAND, pair_name2)],
            P_DATE2: [MessageHandler(filters.TEXT & ~filters.COMMAND, pair_date2)],
        },
        fallbacks=[MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), cancel)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_result_buttons))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()

# === –ó–∞–ø—É—Å–∫
import sys
import asyncio

if __name__ == "__main__":
    # –î–ª—è Windows Python 3.8+
    if sys.platform.startswith("win") and sys.version_info >= (3, 8):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    try:
        import nest_asyncio
        nest_asyncio.apply()
    except ImportError:
        print("–£—Å—Ç–∞–Ω–æ–≤–∏ nest_asyncio: pip install nest_asyncio")
        sys.exit(1)

    import contextlib

    async def runner():
        try:
            await main()
        except KeyboardInterrupt:
            print("‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")

    with contextlib.suppress(RuntimeError):
        asyncio.get_event_loop().run_until_complete(runner())


